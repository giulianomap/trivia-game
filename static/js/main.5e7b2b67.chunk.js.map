{"version":3,"sources":["img/trivia.png","actions/index.js","components/Player.js","components/Header.js","services/decodeEntities.js","components/Answers.js","components/Game.js","services/shuffleArray.js","components/Score.js","components/Ranking.js","components/Settings.js","reducers/fetchApis.js","reducers/dataPlayer.js","reducers/answeredReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","clearPlayerAction","name","email","score","assertions","type","Player","props","state","goToGame","handleChange","bind","provokeApis","e","target","value","this","setState","getDataPlayer","getToken","getTrivia","token","then","localStorage","setItem","beginStorage","player","gravatarEmail","JSON","stringify","className","to","src","logo","alt","placeholder","data-testid","onChange","disabled","onClick","React","Component","connect","fetchApis","dispatch","dataPlayerAction","fetch","response","json","data","console","log","tok","tokn","dataGame","results","Header","hash","MD5","toString","dataPlayerReducer","decodeEntities","encodedString","txt","document","createElement","innerHTML","Answers","answered","calculateScore","event","timecount","level","answerRedux","id","totalScore","easy","medium","hard","getScore","newPlayerState","correct","incorrect","randomAnswers","answeredOne","length","map","answer","index","key","answeredReducer","pts","points","Game","i","count","numberQuestions","shuffle","next","beginTimer","clearInterval","myInterval","setInterval","prevState","Math","max","correct_answer","incorrect_answers","randomAllAnswers","array","j","floor","random","shuffleArray","clearAnswered","isFetching","category","question","difficulty","Score","storageRanking","newPlayerRank","picture","getItem","addRankings","parse","clearPlayer","n","s","a","Ranking","orderedRanking","sort","b","Settings","initialState","error","action","initialStatePlayer","initialStateAnswer","rootReducer","combineReducers","timeReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,oC,0VCyGpC,SAASC,EAAkBC,EAAMC,EAAOC,EAAOC,GACpD,MAAO,CACLC,KAlGuB,cAmGvBJ,OACAC,QACAC,QACAC,c,sBCvGEE,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXP,KAAM,GACNC,MAAO,GACPO,UAAU,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARF,E,0EAWNE,GAAI,IAAD,EACUA,EAAEC,OAAlBb,EADM,EACNA,KAAMc,EADA,EACAA,MACdC,KAAKC,SAAL,eAAiBhB,EAAOc,M,oCAGX,IAAD,EAC0CC,KAAKT,MAAnDW,EADI,EACJA,cAAeC,EADX,EACWA,SAAUC,EADrB,EACqBA,UAAWC,EADhC,EACgCA,MADhC,EAEYL,KAAKR,MAArBP,EAFI,EAEJA,KAAMC,EAFF,EAEEA,MACdgB,EAAcjB,EAAMC,GAEpBiB,IAAWG,MAAK,WACdF,EAAUC,GACVE,aAAaC,QAAQ,QAASH,MAEhCL,KAAKC,SAAS,CAAER,UAAU,IAE1B,IAAMgB,EAAe,CACnBC,OAAQ,CACNzB,OACAG,WAAY,EACZD,MAAO,EACPwB,cAAezB,IAGnBqB,aAAaC,QAAQ,QAASI,KAAKC,UAAUJ,M,+BAGrC,IAAD,EAC2BT,KAAKR,MAA/BP,EADD,EACCA,KAAMC,EADP,EACOA,MAAOO,EADd,EACcA,SACrB,OACE,yBAAKqB,UAAU,eACZrB,GAAY,kBAAC,IAAD,CAAUsB,GAAG,UAC1B,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,wBAAIJ,UAAU,iBAAd,gBACA,2BACEA,UAAU,aACVzB,KAAK,OACL8B,YAAY,WACZC,cAAY,oBACZnC,KAAK,OACLoC,SAAUrB,KAAKN,eAEjB,2BACEoB,UAAU,aACVzB,KAAK,QACL8B,YAAY,QACZC,cAAY,uBACZnC,KAAK,QACLoC,SAAUrB,KAAKN,eAEjB,4BACEoB,UAAU,oBACVzB,KAAK,SACL+B,cAAY,WACZE,WAAYrC,GAAQC,GACpBqC,QAASvB,KAAKJ,aALhB,a,GA9Da4B,IAAMC,WA8FZC,eAjBS,SAAClC,GAAD,MAAY,CAClCa,MAAOb,EAAMmC,UAAUtB,UAGE,SAACuB,GAAD,MAAe,CACxC1B,cAAe,SAACjB,EAAMC,GAAP,OAAiB0C,ED9E3B,SAA0B3C,EAAMC,GACrC,MAAO,CACLG,KATuB,cAUvBJ,OACAC,SC0EuC2C,CAAiB5C,EAAMC,KAChEiB,SAAU,SAACN,GAAD,OAAO+B,GDpCV,SAACA,GAEN,OADAA,EAnCK,CACLvC,KAtByB,kBAyDlByC,MAJM,qDAKVxB,MAAK,SAACyB,GAAD,OAAcA,EAASC,UAC5B1B,MACC,SAAC2B,GAEC,OADAC,QAAQC,IAAIF,EAAK5B,OACVuB,EAnCR,CACLvC,KA3BsB,aA4BtB+C,IAiCyCH,EAAK5B,eC8BhDD,UAAW,SAACiC,GAAD,OAAUT,GDrBUvB,ECqBgBgC,EDpBxC,SAACT,GAEN,OADAA,EAvCK,CACLvC,KAjC0B,mBAwEnByC,MAAM,GAAD,OAJE,+CAIF,OAAgBzB,IACzBC,MAAK,SAACyB,GAAD,OAAcA,EAASC,UAC5B1B,MACC,SAAC2B,GAEC,OADAC,QAAQC,IAAIF,GACLL,EAvCR,CACLvC,KAtCuB,cAuCvBiD,SAqC0CL,EAAKM,gBAR5C,IAA0BlC,MC+BlBqB,CAA6CpC,G,gBCjGtDkD,E,iLACM,IAAD,EACwBxC,KAAKT,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MACfsD,EAAOC,cAAIxD,GAAOyD,WACxB,OACE,yBAAK7B,UAAU,iBACb,uBAAGM,cAAY,sBAAf,UAA2C,6BAAOnC,GAClD,yBACE6B,UAAU,eACVM,cAAY,yBACZF,IAAI,GACJF,IAAG,0CAAqCyB,KAE1C,qCAAU,6BAAM,0BAAMrB,cAAY,gBAAgBjC,S,GAbrCqC,IAAMC,WA+BZC,eAZS,SAAClC,GAAD,MAAY,CAClCP,KAAMO,EAAMoD,kBAAkB3D,KAC9BC,MAAOM,EAAMoD,kBAAkB1D,MAC/BC,MAAOK,EAAMoD,kBAAkBzD,SASlBuC,CAAyBc,GCpCzB,SAASK,EAAeC,GACrC,IAAMC,EAAMC,SAASC,cAAc,YAEnC,OADAF,EAAIG,UAAYJ,EACTC,EAAIhD,M,ICGPoD,E,YACJ,WAAY5D,GAAQ,IAAD,8BACjB,4CAAMA,KACD6D,SAAW,EAAKA,SAASzD,KAAd,gBAChB,EAAK0D,eAAiB,EAAKA,eAAe1D,KAApB,gBAHL,E,iFAOjBuC,QAAQC,IAAI,iC,+BAGLmB,EAAOC,EAAWC,IAGzBC,EADwBzD,KAAKT,MAArBkE,eAGgB,YAApBH,EAAMxD,OAAO4D,IACf1D,KAAKqD,eAAeE,EAAWC,K,qCAIpBD,EAAWC,GACxB,IAKMG,EAAa,GAAKJ,EALL,CACjBK,KAAM,EACNC,OAAQ,EACRC,KAAM,GAEuCN,IAE/CO,EADqB/D,KAAKT,MAAlBwE,UACCJ,GARsB,MAUY3D,KAAKT,MAC1CyE,EAAiB,CACrBtD,OAAQ,CACNzB,KAb2B,EAUvBA,KAIJG,WAd2B,EAUjBA,WAIe,EACzBD,MAf2B,EAULA,MAKPwE,EACfhD,cAhB2B,EAUEzB,QASjCqB,aAAaC,QAAQ,QAASI,KAAKC,UAAUmD,M,+BAKrC,IAAD,SACsEhE,KAAKT,MAA1E0E,EADD,EACCA,QAASC,EADV,EACUA,UAAWC,EADrB,EACqBA,cAAeC,EADpC,EACoCA,YAAab,EADjD,EACiDA,UAAWC,EAD5D,EAC4DA,MAEnE,OAA6B,IAAzBW,EAAcE,OAEd,yBAAKvD,UAAU,kBACb,4BACEM,cAAY,iBACZsC,GAAG,UACHnC,QAAS,SAAC1B,GAAD,OAAO,EAAKuD,SAASvD,EAAG0D,EAAWC,IAC5ClC,SAAU8C,EACVtD,UAAWsD,EAAc,eAAiB,QAEzCvB,EAAeoB,IAEjBC,EAAUI,KAAI,SAACC,EAAQC,GAAT,OACb,4BACEC,IAAKF,EACLb,GAAG,YACH5C,UAAWsD,EAAc,aAAe,OACxChD,cAAA,uBAA6BoD,GAC7BjD,QAAS,SAAC1B,GAAD,OAAO,EAAKuD,SAASvD,EAAG0D,EAAWC,IAC5ClC,SAAU8C,GAETvB,EAAe0B,QAOtB,yBAAKzD,UAAU,kBACZqD,EAAcE,OAAS,GACtBF,EAAcG,KAAI,SAACC,EAAQC,GAAT,OAChBD,IAAWN,EACT,4BACEQ,IAAKF,EACLnD,cAAY,iBACZsC,GAAG,UACHnC,QAAS,SAAC1B,GAAD,OAAO,EAAKuD,SAASvD,EAAG0D,EAAWC,IAC5ClC,SAAU8C,EACVtD,UAAWsD,EAAc,eAAiB,QAEzCvB,EAAe0B,IAGlB,4BACEE,IAAKF,EACLb,GAAG,YACH5C,UAAWsD,EAAc,aAAe,OACxChD,cAAA,uBAA6BoD,GAC7BjD,QAAS,SAAC1B,GAAD,OAAO,EAAKuD,SAASvD,EAAG0D,EAAWC,IAC5ClC,SAAU8C,GAETvB,EAAe0B,Y,GAnGZ/C,IAAMC,WAyIbC,eA7BS,SAAClC,GAAD,MAAY,CAClC8C,SAAU9C,EAAMmC,UAAUW,SAC1B8B,YAAa5E,EAAMkF,gBAAgBN,YACnCjF,MAAOK,EAAMoD,kBAAkBzD,MAC/BC,WAAYI,EAAMoD,kBAAkBxD,WACpCH,KAAMO,EAAMoD,kBAAkB3D,KAC9BC,MAAOM,EAAMoD,kBAAkB1D,UAIN,SAAC0C,GAAD,MAAe,CACxC6B,YAAa,SAAC5D,GAAD,OAAO+B,EJtCb,CACLvC,KAlFoB,cIwHtB0E,SAAU,SAACY,GAAD,OAAS/C,EJ3BZ,CACLvC,KA5FqB,YA6FrBuF,OIyB4CD,QAiBjCjD,CAA6CyB,G,ICrItD0B,E,YACJ,WAAYtF,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXsF,EAAG,EACHC,MAAO,GACPC,gBAAiB,EACjBb,cAAe,IAEjB,EAAKc,QAAU,EAAKA,QAAQtF,KAAb,gBACf,EAAKuF,KAAO,EAAKA,KAAKvF,KAAV,gBACZ,EAAKwF,WAAa,EAAKA,WAAWxF,KAAhB,gBAVD,E,iFAcjBK,KAAKmF,aACLjD,QAAQC,IAAI,8B,2CAKQ,IACZ4C,EAAU/E,KAAKR,MAAfuF,MADW,EAEkB/E,KAAKT,MAAlC6E,EAFW,EAEXA,YAAaX,EAFF,EAEEA,aACN,IAAVsB,GAAeX,KAClBgB,cAAcpF,KAAKqF,YACnB5B,O,mCAIU,IAAD,OACX2B,cAAcpF,KAAKqF,YACnBrF,KAAKqF,WAAaC,aAAY,WAC5B,EAAKrF,UAAS,SAACsF,GAAD,MAAgB,CAC5BR,MAAOS,KAAKC,IAAIF,EAAUR,MAAQ,EAAG,SACtC,O,gCAIM,IACDzC,EAAatC,KAAKT,MAAlB+C,SACAwC,EAAM9E,KAAKR,MAAXsF,EACFb,EAAU3B,EAASwC,EAAE,GAAGY,eACxBxB,EAAY5B,EAASwC,EAAE,GAAGa,kBAE1BC,ECvDK,SAAsBC,GACnC,IAAK,IAAIf,EAAIe,EAAMxB,OAAS,EAAGS,EAAI,EAAGA,IAAK,CACvC,IAAMgB,EAAIN,KAAKO,MAAMP,KAAKQ,UAAYlB,EAAI,IADH,EAEhB,CAACe,EAAMC,GAAID,EAAMf,IAAvCe,EAAMf,GAFgC,KAE5Be,EAAMC,GAFsB,KAI3C,OAAOD,EDkDoBI,CADT,sBAAO/B,GAAP,CAAkBD,KAElCjE,KAAKC,SAAS,CAAEkE,cAAeyB,M,8BAM/BM,EAD0BlG,KAAKT,MAAvB2G,iBAGRlG,KAAKC,SAAS,CAAE8E,MAAO,KACvB/E,KAAKmF,aANA,IAQGH,EAAoBhF,KAAKR,MAAzBwF,gBACRhF,KAAKC,SAAS,CAAE+E,gBAAiBA,EAAkB,IAE/CA,EAAkB,GACpBhF,KAAKiF,UAZF,IAeGH,EAAM9E,KAAKR,MAAXsF,EACR,OAAIA,EAAI,EACC9E,KAAKC,SAAS,CAAE6E,EAAGA,EAAI,IACf,IAANA,EACF9E,KAAKC,SAAS,CAAE6E,EAAG,IAErB9E,KAAKC,SAAS,CAAE6E,Q,+BAIf,IAAD,EACuC9E,KAAKT,MAA3C+C,EADD,EACCA,SAAU6D,EADX,EACWA,WAAY/B,EADvB,EACuBA,YADvB,EAE+BpE,KAAKR,MAAnCsF,EAFD,EAECA,EAAGC,EAFJ,EAEIA,MAAOC,EAFX,EAEWA,gBAClB,OACE,6BACGmB,GAAc,0CACbA,GAAc7D,EAAS+B,OAAS,GAChC,6BAASvD,UAAU,QACjB,6BACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,YACf,wBAAIM,cAAY,qBAAhB,cAAgDyB,EAAeP,EAASwC,GAAGsB,WAC3E,wBAAIhF,cAAY,iBAAhB,cAA4CyB,EAAeP,EAASwC,GAAGuB,YAEvE,kBAAC,EAAD,CACEpC,QAAS3B,EAASwC,GAAGY,eACrBxB,UAAW5B,EAASwC,GAAGa,kBACvBxB,cAAenE,KAAKR,MAAM2E,cAC1BW,EAAGA,EACHvB,UAAWwB,EACXvB,MAAOlB,EAASwC,GAAGwB,cAGrB,wBAAIxF,UAAU,SAAd,cAAkCiE,IAGrCX,GACC,4BAAQtD,UAAU,oBAAoBM,cAAY,WAAWG,QAASvB,KAAKkF,MAA3E,QAImB,IAApBF,GAAyB,kBAAC,IAAD,CAAUjE,GAAG,gB,GAzG5BS,IAAMC,WAuIVC,eAxBS,SAAClC,GAAD,MAAY,CAClC8C,SAAU9C,EAAMmC,UAAUW,SAC1B6D,WAAY3G,EAAMmC,UAAUwE,WAC5B/B,YAAa5E,EAAMkF,gBAAgBN,gBAKV,SAACxC,GAAD,MAAe,CACxCsE,cAAe,SAACrG,GAAD,OAAO+B,ELrCf,CACLvC,KAvFiB,WK4HnBoE,YAAa,SAAC5D,GAAD,OAAO+B,EL5Cb,CACLvC,KAlFoB,iBK2ITqC,CAA6CmD,GEzItD0B,E,YACJ,WAAYhH,GAAQ,IAAD,8BACjB,4CAAMA,KACDiH,eAAiB,EAAKA,eAAe7G,KAApB,gBAFL,E,iFAMjBK,KAAKwG,mB,uCAGW,IAAD,EACexG,KAAKT,MAA3BN,EADO,EACPA,KAAME,EADC,EACDA,MAAOsD,EADN,EACMA,KACfgE,EAAgB,CACpBxH,OACAE,QACAuH,QAAQ,mCAAD,OAAqCjE,IAE9C,GAAKlC,aAAaoG,QAAQ,WAEnB,CACL,IAAMC,EAAW,sBAAOhG,KAAKiG,MAAMtG,aAAaoG,QAAQ,aAAvC,CAAoDF,IACrElG,aAAaC,QAAQ,UAAWI,KAAKC,UAAU+F,SAH/CrG,aAAaC,QAAQ,UAAWI,KAAKC,UAAU,CAAC4F,O,+BAS1C,IAAD,EACoCzG,KAAKT,MAAxCuH,EADD,EACCA,YAAa1H,EADd,EACcA,WAAYD,EAD1B,EAC0BA,MACjC,OACE,6BACE,kBAAC,EAAD,MACA,6BAAS2B,UAAU,WACjB,iDACE1B,GAAc,GAAM,uBAAGgC,cAAY,iBAAf,aACpBhC,EAAa,GAAM,uBAAGgC,cAAY,iBAAf,sBACrB,iDACA,kDAAuB,0BAAMA,cAAY,wBAAwBjC,GAAjE,YACA,sCACU,0BAAMiC,cAAY,2BAA2BhC,GADvD,oBAIF,6BAAS0B,UAAU,oBACnB,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAQD,UAAU,oBAAoBzB,KAAK,SAAS+B,cAAY,iBAAiBG,QAAS,kBAAMuF,EAAY,GAAI,GAAI,EAAG,KAAvH,eAIF,kBAAC,IAAD,CAAM/F,GAAG,YACP,4BAAQD,UAAU,oBAAoBzB,KAAK,SAAS+B,cAAY,eAAhE,sB,GAjDUI,IAAMC,WA8EXC,eAnBS,SAAClC,GAAD,MAAY,CAClCJ,WAAYI,EAAMoD,kBAAkBxD,WACpCH,KAAMO,EAAMoD,kBAAkB3D,KAC9BE,MAAOK,EAAMoD,kBAAkBzD,MAC/BsD,KAAMC,cAAIlD,EAAMoD,kBAAkB1D,OAAOyD,eAGhB,SAACf,GAAD,MAAe,CACxCkF,YAAa,SAACC,EAAGlH,EAAGmH,EAAGC,GAAV,OAAgBrF,EAAS5C,EAAkB+H,EAAGlH,EAAGmH,EAAGC,QAWpDvF,CAA6C6E,GC/EtDW,E,iLAEF,IACMC,EADevG,KAAKiG,MAAMtG,aAAaoG,QAAQ,YACjBS,MAAK,SAACH,EAAGI,GAAJ,OAAUA,EAAElI,MAAQ8H,EAAE9H,SACvD2H,EAAgB9G,KAAKT,MAArBuH,YACR,OACE,6BACE,wBAAIhG,UAAU,aAAaM,cAAY,iBAAvC,qCACA,4BACG+F,EAAe7C,KAAI,SAAC5D,EAAQ8D,GAAT,OAClB,wBAAI1D,UAAU,aACZ,yBAAKA,UAAU,WAAWE,IAAG,0CAAqC0B,cAAIhC,EAAOxB,OAAOyD,YAAczB,IAAI,KACtG,uBAAGE,cAAA,sBAA4BoD,IAA/B,aAAmD9D,EAAOzB,KAA1D,MACA,uBAAGmC,cAAA,uBAA6BoD,IAAhC,aAAoD9D,EAAOvB,MAA3D,UAIN,kBAAC,IAAD,CAAM4B,GAAG,KACP,4BAAQD,UAAU,oBAAoBzB,KAAK,SAAS+B,cAAY,cAAcG,QAAS,kBAAMuF,EAAY,GAAI,GAAI,EAAG,KAApH,oB,GAlBYtF,IAAMC,WAmCbC,cAAQ,MARI,SAACE,GAAD,MAAe,CACxCkF,YAAa,SAACC,EAAGlH,EAAGmH,EAAGC,GAAV,OAAgBrF,EAAS5C,EAAkB+H,EAAGlH,EAAGmH,EAAGC,QAOpDvF,CAAkCwF,GChBlCI,E,iLApBX,OACE,6BACE,wBAAIlG,cAAY,kBAAhB,wB,GALeI,IAAMC,W,oCCDvB8F,EAAe,CACnBpB,YAAY,EACZ9F,MAAO,GACPiC,SAAU,GACVkF,MAAO,IAoCM7F,MAjCf,WAAkD,IAA/BnC,EAA8B,uDAAtB+H,EAAcE,EAAQ,uCAC/C,OAAQA,EAAOpI,MACb,IVXyB,gBUYvB,OAAO,eACFG,EADL,CACY2G,YAAY,IAE1B,IVdsB,aUepB,OAAO,eACF3G,EADL,CAEE2G,YAAY,EACZ9F,MAAOoH,EAAOrF,MAElB,IVnB0B,iBUoBxB,OAAO,eACF5C,EADL,CACY2G,YAAY,IAE1B,IVtBuB,cUuBrB,OAAO,eACF3G,EADL,CAEE2G,YAAY,EACZ7D,SAAUmF,EAAOnF,WAErB,IV3BmB,UU4BjB,OAAO,eACF9C,EADL,CAEE2G,YAAY,EACZqB,MAAOC,EAAOD,QAElB,QACE,OAAOhI,ICpCPkI,EAAqB,CACzBzI,KAAM,GACNC,MAAO,GACPC,MAAO,EACPC,WAAY,GA0BCwD,MAvBf,WAAgE,IAArCpD,EAAoC,uDAA5BkI,EAAoBD,EAAQ,uCAC7D,OAAQA,EAAOpI,MACb,IXNuB,cWOrB,OAAO,eAAKG,EAAZ,CAAmBP,KAAMwI,EAAOxI,KAAMC,MAAOuI,EAAOvI,QACtD,IXLqB,YWMnB,OAAO,eACFM,EADL,CAEEL,MAAOK,EAAML,MAAQsI,EAAO7C,OAC5BxF,WAAYI,EAAMJ,WAAa,IAEnC,IXVuB,cWWrB,OAAO,eACFI,EADL,CAEEP,KAAMwI,EAAOxI,KACbC,MAAOuI,EAAOvI,MACdC,MAAOsI,EAAOtI,MACdC,WAAYqI,EAAOrI,aAEvB,QACE,OAAOI,IC1BPmI,EAAqB,CACzBvD,aAAa,GAcAM,MAXf,WAA8D,IAArClF,EAAoC,uDAA5BmI,EAAoBF,EAAQ,uCAC3D,OAAQA,EAAOpI,MACb,IZFoB,WYGlB,OAAO,eAAKG,EAAZ,CAAmB4E,aAAa,IAClC,IZHiB,QYIf,OAAO,eAAK5E,EAAZ,CAAmB4E,aAAa,IAClC,QACE,OAAO5E,I,kBCAEoI,EAPKC,YAAgB,CAClClG,YACAiB,oBACA8B,kBACAoD,kBCNIC,EAAmBC,OAAOC,sCAAwCC,IAIzDC,EAFDC,YAAYR,EAAaG,EAAiBM,YAAgBC,OCMpDC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,mBCAS,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,UAAW1J,IACjC,kBAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,QAAQC,UAAWnE,IACrC,kBAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,SAASC,UAAWzC,IACtC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,WAAWC,UAAW9B,IACxC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,YAAYC,UAAW1B,QDR3C,QAGJtE,SAASiG,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9I,MAAK,SAAA+I,GACjCA,EAAaC,kB","file":"static/js/main.5e7b2b67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const DATA_TOKEN = 'DATA_TOKEN';\nexport const REQUEST_TRIVIA = 'REQUEST_TRIVIA';\nexport const DATA_TRIVIA = 'DATA_TRIVIA';\nexport const FAILURE = 'FAILURE';\nexport const DATA_PLAYER = 'DATA_PLAYER';\nexport const ANSWERED = 'ANSWERED';\nexport const CLEAR = 'CLEAR';\nexport const GET_SCORE = 'GET_SCORE';\nexport const CLEAR_SCORE = 'CLEAR_SCORE';\nexport const SET_TIME = 'SET_TIME';\n\nexport function dataPlayerAction(name, email) {\n  return {\n    type: DATA_PLAYER,\n    name,\n    email,\n  };\n}\n\nexport function requestTokenAction() {\n  return {\n    type: REQUEST_TOKEN,\n  };\n}\n\nexport function successTokenAction(tok) {\n  return {\n    type: DATA_TOKEN,\n    tok,\n  };\n}\n\nexport function requestTriviaAction() {\n  return {\n    type: REQUEST_TRIVIA,\n  };\n}\n\nexport function successTriviaAction(dataGame) {\n  return {\n    type: DATA_TRIVIA,\n    dataGame,\n  };\n}\n\nexport function failureAllAction(error) {\n  return {\n    type: FAILURE,\n    error,\n  };\n}\n\nconst apiToken = 'https://opentdb.com/api_token.php?command=request';\nexport function fetchTokenThunk() {\n  return (dispatch) => {\n    dispatch(requestTokenAction());\n    return fetch(apiToken)\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          console.log(data.token);\n          return dispatch(successTokenAction(data.token));\n        },\n        // (error) => dispatch(failureAllAction(error)),\n        // aparentemente nem precisa de error nessas apis\n      );\n  };\n}\n\nconst apiTrivia = 'https://opentdb.com/api.php?amount=5&token=';\nexport function fetchTriviaThunk(token) {\n  return (dispatch) => {\n    dispatch(requestTriviaAction());\n    return fetch(`${apiTrivia}${token}`)\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          console.log(data);\n          return dispatch(successTriviaAction(data.results));\n        },\n        // (error) => dispatch(failureAllAction(error)),\n      );\n  };\n}\n\nexport function answeredAction() {\n  return {\n    type: ANSWERED,\n  };\n}\n\nexport function clearAction() {\n  return {\n    type: CLEAR,\n  };\n}\n\nexport function playerScoreAction(points) {\n  return {\n    type: GET_SCORE,\n    points,\n  };\n}\n\nexport function clearPlayerAction(name, email, score, assertions) {\n  return {\n    type: CLEAR_SCORE,\n    name,\n    email,\n    score,\n    assertions,\n  };\n}\n\n// export function timerAction(count) {\n//   return {\n//     type: SET_TIME,\n//     count,\n//   };\n// }\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { dataPlayerAction, fetchTokenThunk, fetchTriviaThunk } from '../actions';\n// import LinkSettings from './LinkSettings';\nimport logo from '../img/trivia.png';\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      goToGame: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.provokeApis = this.provokeApis.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  provokeApis() {\n    const { getDataPlayer, getToken, getTrivia, token } = this.props;\n    const { name, email } = this.state;\n    getDataPlayer(name, email);\n    // promise para ter as duas requisiçoes na sequência certa\n    getToken().then(() => {\n      getTrivia(token);\n      localStorage.setItem('token', token);\n    });\n    this.setState({ goToGame: true });\n    // iniciar um storage mesmo que vazio, contra erro \"player of null\"\n    const beginStorage = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(beginStorage));\n  }\n\n  render() {\n    const { name, email, goToGame } = this.state;\n    return (\n      <div className=\"player-page\">\n        {goToGame && <Redirect to=\"/game\" />}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"title-started\">Get started!</h1>\n        <input\n          className=\"user-input\"\n          type=\"text\"\n          placeholder=\"Nickname\"\n          data-testid=\"input-player-name\"\n          name=\"name\"\n          onChange={this.handleChange}\n        />\n        <input\n          className=\"user-input\"\n          type=\"email\"\n          placeholder=\"Email\"\n          data-testid=\"input-gravatar-email\"\n          name=\"email\"\n          onChange={this.handleChange}\n          />\n        <button\n          className=\"transition-button\"\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={!(name && email)}\n          onClick={this.provokeApis}\n        >\n          PLAY\n        </button>\n        {/* <LinkSettings /> */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.fetchApis.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getDataPlayer: (name, email) => dispatch(dataPlayerAction(name, email)),\n  getToken: (e) => dispatch(fetchTokenThunk(e)),\n  getTrivia: (tokn) => dispatch(fetchTriviaThunk(tokn)),\n});\n\nPlayer.propTypes = {\n  token: propTypes.string.isRequired,\n  getDataPlayer: propTypes.func.isRequired,\n  getToken: propTypes.func.isRequired,\n  getTrivia: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\n\nclass Header extends React.Component {\n  render() {\n    const { name, email, score } = this.props;\n    const hash = MD5(email).toString();\n    return (\n      <div className=\"header-player\">\n        <p data-testid=\"header-player-name\">Player:<br />{name}</p>\n        <img\n          className=\"img-gravatar\"\n          data-testid=\"header-profile-picture\"\n          alt=\"\"\n          src={`https://www.gravatar.com/avatar/${hash}`}\n        />\n        <p>Score: <br /><span data-testid=\"header-score\">{score}</span></p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.dataPlayerReducer.name,\n  email: state.dataPlayerReducer.email,\n  score: state.dataPlayerReducer.score,\n});\n\nHeader.propTypes = {\n  name: propTypes.string.isRequired,\n  email: propTypes.string.isRequired,\n  score: propTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","export default function decodeEntities(encodedString) {\n  const txt = document.createElement(\"textarea\");\n  txt.innerHTML = encodedString;\n  return txt.value;\n}\n\n// Function created by Rafael Quinteiro (Trybe - T5).\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { answeredAction, playerScoreAction } from '../actions';\nimport decodeEntities from '../services/decodeEntities';\n\nclass Answers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answered = this.answered.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('component answers did mount');\n  }\n\n  answered(event, timecount, level) {\n    // first send globally state of answeredOne true\n    const { answerRedux } = this.props;\n    answerRedux();\n    // then calculate score, only if answer was correct\n    if (event.target.id === 'correct') {\n      this.calculateScore(timecount, level);\n    }\n  }\n\n  calculateScore(timecount, level) {\n    const difficulty = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    const totalScore = 10 + timecount * difficulty[level];\n    const { getScore } = this.props;\n    getScore(totalScore);\n    // Now send it all to local storage\n    const { name, assertions, score, email } = this.props;\n    const newPlayerState = {\n      player: {\n        name,\n        assertions: assertions + 1,\n        score: score + totalScore,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(newPlayerState));\n  }\n  // [HA]{Game - R6} Ajuda - (objeto difficulty + storage, Felipe Vieira, Grupo 2, PR: https://github.com/tryber/sd-05-project-trivia-react-redux-2/pull/4/files ).\n  // JSON.stringify https://www.w3schools.com/js/js_json_stringify.asp\n\n  render() {\n    const { correct, incorrect, randomAnswers, answeredOne, timecount, level } = this.props;\n    // could only randomize from 2nd question on, to wait for api to be loaded\n    if (randomAnswers.length === 0)\n      return (\n        <div className=\"answers-button\">\n          <button\n            data-testid=\"correct-answer\"\n            id=\"correct\"\n            onClick={(e) => this.answered(e, timecount, level)}\n            disabled={answeredOne}\n            className={answeredOne ? 'green-border' : 'answ'}\n          >\n            {decodeEntities(correct)}\n          </button>\n          {incorrect.map((answer, index) => (\n            <button\n              key={answer}\n              id=\"incorrect\"\n              className={answeredOne ? 'red-border' : 'answ'}\n              data-testid={`wrong-answer-${index}`}\n              onClick={(e) => this.answered(e, timecount, level)}\n              disabled={answeredOne}\n            >\n              {decodeEntities(answer)}\n            </button>\n          ))}\n        </div>\n      );\n    else\n      return (\n        <div className=\"answers-button\">\n          {randomAnswers.length > 0 &&\n            randomAnswers.map((answer, index) =>\n              answer === correct ? (\n                <button\n                  key={answer}\n                  data-testid=\"correct-answer\"\n                  id=\"correct\"\n                  onClick={(e) => this.answered(e, timecount, level)}\n                  disabled={answeredOne}\n                  className={answeredOne ? 'green-border' : 'answ'}\n                >\n                  {decodeEntities(answer)}\n                </button>\n              ) : (\n                <button\n                  key={answer}\n                  id=\"incorrect\"\n                  className={answeredOne ? 'red-border' : 'answ'}\n                  data-testid={`wrong-answer-${index}`}\n                  onClick={(e) => this.answered(e, timecount, level)}\n                  disabled={answeredOne}\n                >\n                  {decodeEntities(answer)}\n                </button>\n              )\n            )}\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  dataGame: state.fetchApis.dataGame,\n  answeredOne: state.answeredReducer.answeredOne,\n  score: state.dataPlayerReducer.score,\n  assertions: state.dataPlayerReducer.assertions,\n  name: state.dataPlayerReducer.name,\n  email: state.dataPlayerReducer.email,\n  // timecount: state.timeReducer.count,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  answerRedux: (e) => dispatch(answeredAction(e)),\n  getScore: (pts) => dispatch(playerScoreAction(pts)),\n});\n\nAnswers.propTypes = {\n  correct: PropTypes.string.isRequired,\n  incorrect: PropTypes.arrayOf(PropTypes.string).isRequired,\n  answeredOne: PropTypes.bool.isRequired,\n  answerRedux: PropTypes.func.isRequired,\n  getScore: PropTypes.func.isRequired,\n  timecount: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  level: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from './Header';\nimport Answers from './Answers';\nimport { clearAction, answeredAction } from '../actions';\nimport decodeEntities from '../services/decodeEntities';\nimport shuffleArray from '../services/shuffleArray';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      i: 0,\n      count: 30,\n      numberQuestions: 1,\n      randomAnswers: [],\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.next = this.next.bind(this);\n    this.beginTimer = this.beginTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.beginTimer();\n    console.log('component game did mount');\n    // this.shuffle(); \n    // could only randomize from 2nd question on, to wait for api to be charged\n  }\n\n  componentDidUpdate() {\n    const { count } = this.state;\n    const { answeredOne, answerRedux } = this.props;\n    if ( count === 0 || answeredOne) {\n      clearInterval(this.myInterval);\n      answerRedux();\n    }\n  }\n\n  beginTimer() {\n    clearInterval(this.myInterval);\n    this.myInterval = setInterval(() => {\n      this.setState((prevState) => ({\n        count: Math.max(prevState.count - 1, 0) }));\n    }, 1000);\n  }\n  // [HA]{Tela Game, R5: timer} Modelo - https://www.youtube.com/watch?v=NAx76xx40jM .\n\n  shuffle() {\n    const { dataGame } = this.props;\n    const { i } = this.state;\n    const correct = dataGame[i+1].correct_answer;\n    const incorrect = dataGame[i+1].incorrect_answers;\n    const allAnswers = [...incorrect, correct];\n    const randomAllAnswers = shuffleArray(allAnswers);\n    this.setState({ randomAnswers: randomAllAnswers });\n  }\n\n  next() {\n    // reset the answeredOne state because not answered yet\n    const { clearAnswered } = this.props;\n    clearAnswered();\n    // reset the timer\n    this.setState({ count: 30 });\n    this.beginTimer();\n    // mark the total number of questions already displayed\n    const { numberQuestions } = this.state;\n    this.setState({ numberQuestions: numberQuestions + 1 });\n    // shuffle new set of questions\n    if (numberQuestions < 5) {\n      this.shuffle();\n    }\n    // go to next question according to its index\n    const { i } = this.state;\n    if (i < 4) {\n      return this.setState({ i: i + 1 });\n    } else if (i === 4) {\n      return this.setState({ i: 0 });\n    }\n    return this.setState({ i });\n  }\n\n\n  render() {\n    const { dataGame, isFetching, answeredOne } = this.props;\n    const { i, count, numberQuestions } = this.state;\n    return (\n      <div>\n        {isFetching && <p>Loading...</p>}\n        {!isFetching && dataGame.length > 0 && (\n          <section className=\"game\">\n            <div>\n            <Header />\n            <div className=\"question\">\n            <h3 data-testid=\"question-category\">CATEGORY - {decodeEntities(dataGame[i].category)}</h3>\n            <h3 data-testid=\"question-text\">QUESTION - {decodeEntities(dataGame[i].question)}</h3>\n            </div>\n            <Answers\n              correct={dataGame[i].correct_answer}\n              incorrect={dataGame[i].incorrect_answers}\n              randomAnswers={this.state.randomAnswers}\n              i={i}\n              timecount={count}\n              level={dataGame[i].difficulty}\n            />\n            </div>\n            <h3 className=\"timer\">Time left: {count}</h3>\n          </section>\n        )}\n        {answeredOne && (\n          <button className=\"transition-button\" data-testid=\"btn-next\" onClick={this.next}>\n            NEXT\n          </button>\n        )}\n        {numberQuestions === 6 && <Redirect to=\"/score\" />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  dataGame: state.fetchApis.dataGame,\n  isFetching: state.fetchApis.isFetching,\n  answeredOne: state.answeredReducer.answeredOne,\n  // timecount: state.timeReducer.count,\n  // finally chose local state over stored state for timer\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearAnswered: (e) => dispatch(clearAction(e)),\n  answerRedux: (e) => dispatch(answeredAction(e)),\n  // getTimer: (count) => dispatch(timerAction(count)),\n});\n\nGame.propTypes = {\n  dataGame: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  answeredOne: PropTypes.bool.isRequired,\n  timecount: PropTypes.number.isRequired,\n  clearAnswered: PropTypes.func.isRequired,\n  answerRedux: PropTypes.func.isRequired,\n  getTimer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","export default function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// ref: code grepper js shuffle array https://www.codegrepper.com/app/profile.php?id=13466 .\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { MD5 } from 'crypto-js';\nimport { clearPlayerAction } from '../actions';\nimport Header from './Header';\n\nclass Score extends React.Component {\n  constructor(props) {\n    super(props);\n    this.storageRanking = this.storageRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.storageRanking();\n  }\n\n  storageRanking() {\n    const { name, score, hash } = this.props;\n    const newPlayerRank = {\n      name,\n      score,\n      picture: `https://www.gravatar.com/avatar/${hash}`,\n    };\n    if (!localStorage.getItem('ranking')) {\n      localStorage.setItem('ranking', JSON.stringify([newPlayerRank]));\n    } else {\n      const addRankings = [...JSON.parse(localStorage.getItem('ranking')), newPlayerRank];\n      localStorage.setItem('ranking', JSON.stringify(addRankings));\n    }\n  }\n\n  // [HA] Consulta do PR https://github.com/tryber/sd-05-project-trivia-react-redux-4/pull/14/files.\n\n  render() {\n    const { clearPlayer, assertions, score } = this.props;\n    return (\n      <div>\n        <Header />\n        <section className=\"message\">\n          <h2>Feedback message:</h2>\n          {(assertions >= 3) && <p data-testid=\"feedback-text\">You rock!</p>}\n          {(assertions < 3) && <p data-testid=\"feedback-text\">Could be better...</p>}\n          <h2>See your results:</h2>\n          <p>Your total score is <span data-testid=\"feedback-total-score\">{score}</span> points.</p>\n          <p>\n            You got <span data-testid=\"feedback-total-question\">{assertions}</span> answers right.\n          </p>\n        </section>\n        <section className=\"buttons-feedback\">\n        <Link to=\"/\">\n          <button className=\"transition-button\" type=\"button\" data-testid=\"btn-play-again\" onClick={() => clearPlayer('', '', 0, 0)}>\n            Play again\n          </button>\n        </Link>\n        <Link to=\"/ranking\">\n          <button className=\"transition-button\" type=\"button\" data-testid=\"btn-ranking\">\n            See ranking\n          </button>\n        </Link>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.dataPlayerReducer.assertions,\n  name: state.dataPlayerReducer.name,\n  score: state.dataPlayerReducer.score,\n  hash: MD5(state.dataPlayerReducer.email).toString(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearPlayer: (n, e, s, a) => dispatch(clearPlayerAction(n, e, s, a)),\n});\n\nScore.propTypes = {\n  name: propTypes.string.isRequired,\n  hash: propTypes.string.isRequired,\n  score: propTypes.number.isRequired,\n  assertions: propTypes.number.isRequired,\n  clearPlayer: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Score);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { MD5 } from 'crypto-js';\nimport { clearPlayerAction } from '../actions';\n\nclass Ranking extends React.Component {\n  render() {\n    const totalRanking = JSON.parse(localStorage.getItem('ranking'));\n    const orderedRanking = totalRanking.sort((a, b) => b.score - a.score);\n    const { clearPlayer } = this.props;\n    return (\n      <div>\n        <h1 className=\"title-rank\" data-testid=\"ranking-title\">Here is the Great Trivia Ranking!</h1>\n        <ol>\n          {orderedRanking.map((player, index) => (\n            <li className=\"each-rank\">\n              <img className=\"gravatar\" src={`https://www.gravatar.com/avatar/${MD5(player.email).toString()}`} alt=\"\" />\n              <p data-testid={`player-name-${index}`}>- PLAYER: {player.name} -</p>\n              <p data-testid={`player-score-${index}`}>-- SCORE: {player.score}.</p>\n            </li>\n          ))}\n        </ol>\n        <Link to=\"/\">\n          <button className=\"transition-button\" type=\"button\" data-testid=\"btn-go-home\" onClick={() => clearPlayer('', '', 0, 0)}>\n            Play again\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearPlayer: (n, e, s, a) => dispatch(clearPlayerAction(n, e, s, a)),\n});\n\nRanking.propTypes = {\n  clearPlayer: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import React from 'react';\n// import { connect } from 'react-redux';\n\nclass Settings extends React.Component {\n  render() {\n    // const { myState, myFunction } = this.props\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Trivia Settings</h1>\n        {/* Aqui jà veremos se desenvolvemos mais fundo os settings\n        no final do projeto (opcional) */}\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   // myState: state.myReducer.key,\n// })\n\n// const mapDispatchToProps = (dispatch) => ({\n//   // myFunction: (e) => dispatch(myAction(e))\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Score);\n\nexport default Settings;\n","import { REQUEST_TOKEN, DATA_TOKEN, REQUEST_TRIVIA, DATA_TRIVIA, FAILURE } from '../actions';\n\nconst initialState = {\n  isFetching: false,\n  token: '',\n  dataGame: [],\n  error: '',\n};\n\nfunction fetchApis(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_TOKEN:\n      return {\n        ...state, isFetching: true,\n      };\n    case DATA_TOKEN:\n      return {\n        ...state,\n        isFetching: false,\n        token: action.tok,\n      };\n    case REQUEST_TRIVIA:\n      return {\n        ...state, isFetching: true,\n      };\n    case DATA_TRIVIA:\n      return {\n        ...state,\n        isFetching: false,\n        dataGame: action.dataGame,\n      };\n    case FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default fetchApis;\n","import { DATA_PLAYER, GET_SCORE, CLEAR_SCORE } from '../actions';\n\nconst initialStatePlayer = {\n  name: '',\n  email: '',\n  score: 0,\n  assertions: 0,\n};\n\nfunction dataPlayerReducer(state = initialStatePlayer, action) {\n  switch (action.type) {\n    case DATA_PLAYER:\n      return { ...state, name: action.name, email: action.email };\n    case GET_SCORE:\n      return {\n        ...state,\n        score: state.score + action.points,\n        assertions: state.assertions + 1,\n      };\n    case CLEAR_SCORE:\n      return {\n        ...state,\n        name: action.name,\n        email: action.email,\n        score: action.score,\n        assertions: action.assertions,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default dataPlayerReducer;\n","import { ANSWERED, CLEAR } from '../actions';\n\nconst initialStateAnswer = {\n  answeredOne: false,\n};\n\nfunction answeredReducer(state = initialStateAnswer, action) {\n  switch (action.type) {\n    case ANSWERED:\n      return { ...state, answeredOne: true };\n    case CLEAR:\n      return { ...state, answeredOne: false };\n    default:\n      return state;\n  }\n}\n\nexport default answeredReducer;\n","import { combineReducers } from 'redux';\nimport fetchApis from './fetchApis';\nimport dataPlayerReducer from './dataPlayer';\nimport answeredReducer from './answeredReducer';\nimport timeReducer from './timeReducer';\n\nconst rootReducer = combineReducers({\n  fetchApis,\n  dataPlayerReducer,\n  answeredReducer,\n  timeReducer,\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Player from './components/Player';\nimport Game from './components/Game';\nimport Score from './components/Score';\nimport Ranking from './components/Ranking';\nimport Settings from './components/Settings';\n// import logo from './trivia.png';\n\nimport './App.css';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Player} />\n        <Route exact path=\"/game\" component={Game} />\n        <Route exact path=\"/score\" component={Score} />\n        <Route exact path=\"/ranking\" component={Ranking} />\n        <Route exact path=\"/settings\" component={Settings} />\n      </Switch>\n    </BrowserRouter>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //   </header>\n      // </div>\n  );\n}\n"],"sourceRoot":""}